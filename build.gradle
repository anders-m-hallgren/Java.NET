plugins {
    id 'java'
    id 'application'
}

sourceCompatibility = 12
targetCompatibility = 12

application {
    mainClassName = 'se.clouds.app.javanet.app.Program'
}

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '10.0.0-alpha0'
    compile group: 'org.eclipse.jetty', name: 'jetty-alpn-java-server', version: '10.0.0-alpha0'
    compile group: 'org.eclipse.jetty.http2', name: 'http2-server', version: '10.0.0-alpha0'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '10.0.0-alpha0'
    compile group: 'redis.clients', name: 'jedis', version: '3.1.0'

    testImplementation 'junit:junit:4.12'
}

task dotnetBuild(type: Exec, group: '.NET', description: 'build dotnet') {
    workingDir './'
    commandLine "dotnet", "build"
}

task dotnetPublish(type: Exec, group: '.NET', description: 'publish dotnet') {
    workingDir './'
    commandLine "dotnet", "publish", "-c", "Release", "-o", "out"
}

task dotnetRun(type: Exec, group: '.NET', description: 'run dotnet') {
    workingDir './'
    commandLine "dotnet", "run"
}

task checkSwarm(type: Exec, group: 'Docker', description: 'build dotnet docker') {
    commandLine "sh", "-c", "./checkSwarm.sh"
    doLast {
        if(execResult.exitValue == 0) {
            println('OK')
        } else {
            throw new GradleException('ERROR: Not a swarm node, see output above from checkSwarm')
        }
    }
}

task dockerBuildJava(type: Exec, group: 'Docker', description: 'build java docker') {
    workingDir './'
    commandLine "docker", "build", "-t", "javanetapp", "-f", "docker/java.Dockerfile", "."
}

task dockerBuildDotnet(type: Exec, group: 'Docker', description: 'build dotnet docker') {
    workingDir './'
    commandLine "docker", "build", "-t", "dotnetapp", "-f", "docker/dotnet.Dockerfile", "."
}

task dockerClean(type: Exec, group: 'Docker', description: 'remove dotnet and java docker images') {
    workingDir './'
    commandLine "docker", "rmi", "javanetapp", "dotnetapp"
}

task stackStop(type: Exec, group: 'Docker', description: 'stop stack') {
    workingDir './'
    commandLine "docker", "stack", "rm", "app"
}

task stackRun(type: Exec, group: 'Docker', description: 'run stack') {
    workingDir './'
    commandLine "docker", "stack", "deploy", "-c", "stack.docker.yml", "app"
}

task stackBuildAndRun(type: Exec, group: 'Docker', description: 'run stack') {
    workingDir './'
    commandLine "docker", "stack", "deploy", "-c", "stack.docker.yml", "app"
}

stackBuildAndRun.dependsOn checkSwarm
stackBuildAndRun.dependsOn stackStop
stackBuildAndRun.mustRunAfter dockerBuildJava
stackBuildAndRun.mustRunAfter dockerBuildDotnet
