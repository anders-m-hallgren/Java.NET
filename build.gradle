plugins {
    id 'java'
    id 'application'
}

application {
    mainClassName = 'se.clouds.javanet.app.Program'
}

dependencies {
    compile project(':Components:shared')
    compile project(':Components:core')
    compile project(':Components:app')
}
subprojects {
    version = '1.0'
}

sourceCompatibility = 12
targetCompatibility = 12

allprojects {
    repositories {
        jcenter()
    }
}

sourceSets {
    intTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}
configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    intTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

task DotnetBuild(type: Exec, group: '.NET', description: 'Build dotnet') {
    workingDir './'
    commandLine "dotnet", "build"
}

task DotnetPublish(type: Exec, group: '.NET', description: 'Publish dotnet') {
    workingDir './'
    commandLine "dotnet", "publish", "-c", "Release", "-o", "out"
}

task DotnetRun(type: Exec, group: '.NET', description: 'Run dotnet') {
    workingDir './'
    commandLine "dotnet", "run"
}

task CheckSwarm(type: Exec, group: 'Docker', description: 'Build dotnet docker') {
    commandLine "sh", "-c", "./Tools/checkSwarm.sh"
    doLast {
        if(execResult.exitValue == 0) {
            println('OK')
        } else {
            throw new GradleException('ERROR: Not a swarm node, see output above from checkSwarm')
        }
    }
}

task DockerBuildJava(type: Exec, group: 'Docker', description: 'Build java docker') {
    workingDir './'
    commandLine "docker", "build", "-t", "javanetapp", "-f", "docker/java.Dockerfile", "."
}

task DockerBuildDotnet(type: Exec, group: 'Docker', description: 'Build dotnet docker') {
    workingDir './'
    commandLine "docker", "build", "-t", "dotnetapp", "-f", "docker/dotnet.Dockerfile", "."
}

task DockerClean(type: Exec, group: 'Docker', description: 'Remove dotnet and java docker images') {
    workingDir './'
    commandLine "docker", "rmi", "javanetapp", "dotnetapp"
}

task StackStop(type: Exec, group: 'Docker', description: 'Stop stack') {
    workingDir './'
    commandLine "docker", "stack", "rm", "app"
}

task StackRun(type: Exec, group: 'Docker', description: 'Run stack') {
    workingDir './'
    commandLine "docker", "stack", "deploy", "-c", "stack.docker.yml", "app"
}

task StackBuildAndRun(type: Exec, group: 'Docker', description: 'Build and run stack') {
    workingDir './'
    commandLine "docker", "stack", "deploy", "-c", "stack.docker.yml", "app"
}

task Run(type: Exec, group: 'Docker', description: 'Run all in Docker swarm') {
    workingDir './'
    commandLine "echo", "Run stack..."
}

StackBuildAndRun.dependsOn CheckSwarm
StackBuildAndRun.dependsOn StackStop
StackBuildAndRun.dependsOn DockerBuildJava
StackBuildAndRun.dependsOn DockerBuildDotnet

Run.dependsOn StackBuildAndRun
