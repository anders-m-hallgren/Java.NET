plugins {
    id 'java'
    id 'application'
}

sourceCompatibility = 12
targetCompatibility = 12

application {
    mainClassName = 'se.clouds.app.javanet.app.Program'
}

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '10.0.0-alpha0'
    compile group: 'org.eclipse.jetty', name: 'jetty-alpn-java-server', version: '10.0.0-alpha0'
    compile group: 'org.eclipse.jetty.http2', name: 'http2-server', version: '10.0.0-alpha0'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '10.0.0-alpha0'
    compile group: 'redis.clients', name: 'jedis', version: '3.1.0'

    testImplementation 'junit:junit:4.12'
}

task DotnetBuild(type: Exec, group: '.NET', description: 'Build dotnet') {
    workingDir './'
    commandLine "dotnet", "build"
}

task DotnetPublish(type: Exec, group: '.NET', description: 'Publish dotnet') {
    workingDir './'
    commandLine "dotnet", "publish", "-c", "Release", "-o", "out"
}

task DotnetRun(type: Exec, group: '.NET', description: 'Run dotnet') {
    workingDir './'
    commandLine "dotnet", "run"
}

task CheckSwarm(type: Exec, group: 'Docker', description: 'Build dotnet docker') {
    commandLine "sh", "-c", "./checkSwarm.sh"
    doLast {
        if(execResult.exitValue == 0) {
            println('OK')
        } else {
            throw new GradleException('ERROR: Not a swarm node, see output above from checkSwarm')
        }
    }
}

task DockerBuildJava(type: Exec, group: 'Docker', description: 'Build java docker') {
    workingDir './'
    commandLine "docker", "build", "-t", "javanetapp", "-f", "docker/java.Dockerfile", "."
}

task DockerBuildDotnet(type: Exec, group: 'Docker', description: 'Build dotnet docker') {
    workingDir './'
    commandLine "docker", "build", "-t", "dotnetapp", "-f", "docker/dotnet.Dockerfile", "."
}

task DockerClean(type: Exec, group: 'Docker', description: 'Remove dotnet and java docker images') {
    workingDir './'
    commandLine "docker", "rmi", "javanetapp", "dotnetapp"
}

task StackStop(type: Exec, group: 'Docker', description: 'Stop stack') {
    workingDir './'
    commandLine "docker", "stack", "rm", "app"
}

task StackRun(type: Exec, group: 'Docker', description: 'Run stack') {
    workingDir './'
    commandLine "docker", "stack", "deploy", "-c", "stack.docker.yml", "app"
}

task StackBuildAndRun(type: Exec, group: 'Docker', description: 'Build and run stack') {
    workingDir './'
    commandLine "docker", "stack", "deploy", "-c", "stack.docker.yml", "app"
}

task Run(type: Exec, group: 'Docker', description: 'Run all in Docker swarm') {
    workingDir './'
    commandLine "echo", "Run stack..."
}

StackBuildAndRun.dependsOn CheckSwarm
StackBuildAndRun.dependsOn StackStop
StackBuildAndRun.dependsOn DockerBuildJava
StackBuildAndRun.dependsOn DockerBuildDotnet

Run.dependsOn StackBuildAndRun
